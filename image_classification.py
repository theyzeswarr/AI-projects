# -*- coding: utf-8 -*-
"""image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgSc0TaTYKipIiMhdgEx6AjTxl5A8Eci
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification, load_iris, load_breast_cancer
from sklearn.model_selection import train_test_split

data= pd.read_csv("/Iris (2).csv")

data

data.head()

data.tail()

data.describe()

data.shape

data.isnull().sum()

count = data.Species.value_counts()
count

lab = data.Species.unique().tolist()
lab

plt.pie(count,labels=lab)
plt.title("count of Species", fontsize =20)
plt.show()

plt.subplots(figsize = (7,7))
sns.scatterplot(x= "SepalLengthCm", y="SepalWidthCm",data= data, hue ="Species"),
plt.show()

data1 = data.drop("Id",axis=1)
plot=sns.pairplot(data1,hue="Species",diag_kind="hist")
plot.fig.suptitle("Relation of all feature with each other",y=1.1,fontsize=20)
plt.show()

from sklearn.model_selection import train_test_split

X = data.drop(["Species","Id"],axis=1)
X

Y = data["Species"]
Y

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC

log_model = LogisticRegression(max_iter=1000)
random = RandomForestClassifier()
knn = KNeighborsClassifier()
gauss = GaussianNB()
d_tree = DecisionTreeClassifier()
svc = SVC()
models = [log_model,random,knn,gauss,d_tree,svc]

acc = []
for model in models:
    print(model,"\n")
    x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.3,random_state=1)
    model.fit(x_train,y_train)
    predictions = model.predict(x_test)
    print(classification_report(y_test,predictions))
    print("Confusion Matrix\n",confusion_matrix(y_test,predictions))
    acc = np.append(acc,accuracy_score(y_test,predictions))
    print("\n---------------------------------------------------------\n")